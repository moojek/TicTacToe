#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('tictactoe:server')
var http = require('http')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)


var socket = require('socket.io')
var io = socket(server);


function isWinner(board) {
  console.log(board);
  let winning = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
  ]

  let res = 0
  winning.forEach(win => {
    if (board[win[0]] == 'X' && board[win[0]] == board[win[1]] && board[win[1]] == board[win[2]])
      res++
  })
  return res
}

Rooms = []

io.on('connection', function (socket) {
  socket.on('create', function (params) {
    socket.join(params[0]);
    let sign = 'X'
    if (!Rooms[params[0]])
      sign = 'O'
    Rooms[params[0]] = 'X'
    let board = []
    let characters = { X: 'O', O: 'X' }

    console.log("connected: " + socket.id)

    socket.on('click', function (id) {
      if (board[parseInt(id)] || Rooms[params[0]] != sign)
        return
      board[parseInt(id)] = Rooms[params[0]]
      io.to(params[0]).emit('click', [id, Rooms[params[0]]]);
      if (isWinner(board)) {
        io.to(params[0]).emit('winner', Rooms[params[0]] == 'O' ? params[1] : params[2] + ' wins!')
        io.to(params[0]).emit('reset')
        board = []
        Rooms[params[0]] = 0
      }

      Rooms[params[0]] = characters[Rooms[params[0]]]
    })
  });
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
